name: Build FE
description: Build and deploy webapp
branding:
  icon: upload-cloud
  color: blue
inputs:
  aws-access-key:
    description: 'AWS Secret Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  aws-region:
    description: 'AWS Region of the S3 and CloudFront resources'
    required: true
  aws-s3-name:
    description: 'Name of the AWS S3 bucket'
    required: true
  aws-cloudfront-name:
    description: 'Name of the AWS S3 bucket'
    required: true
  slack-channel:
    description: 'Name of the Slack channel used for CI alerts'
    required: false
    default: ''
  slack-token:
    description: 'Token for Slack integration'
    required: false
    default: ''
  build-command:
    description: 'Command used to build the application [ yarn | npm ] (default: yarn)'
    required: false
    default: 'yarn'
  build-envs:
    description: 'Environment variables passed used for building the application'
    required: false
    default: ''
  build-path:
    description: 'Local path of the build (default: build)'
    required: false
    default: 'build'
  node-version:
    description: 'NodeJS required version (default: 16.x)'
    required: false
    default: '16.x'
  skip-build:
    description: 'Enable for deploy only'
    required: false
    default: false
runs:
  using: "composite"
  steps:  
    - name: Notify Slack Start
      if: ${{ (inputs.slack-channel != '') && (inputs.slack-token != '') }}
      id: notify-slack-start
      uses: cristi-mb/slack-notify@main
      with:
        message-type: 'start'
        slack-channel: ${{ inputs.slack-channel }}
        slack-bot-token: ${{ inputs.slack-token }}
        
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4

    - name: Setup Nodejs
      if: inputs.skip-build == 'false'
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        
    - name: Setup yarn commands
      if: ${{ (inputs.build-command == 'yarn') && (inputs.skip-build == 'false') }}
      run: |
         echo "cache_files=$CACHE_FILES" >> $GITHUB_ENV
         echo "dependencies_cmd=yarn install --pure-lockfile" >> $GITHUB_ENV
         echo "build_cmd=yarn build" >> $GITHUB_ENV
      env: 
        CACHE_FILES: ${{ hashFiles('**/package-lock.json') }}
      shell: bash
      
    - name: Setup npm commands
      if: ${{ (inputs.build-command == 'npm') && (inputs.skip-build == 'false') }}
      run: |
        echo "cache_files=$CACHE_FILES" >> $GITHUB_ENV
        echo "dependencies_cmd=npm ci" >> $GITHUB_ENV
        echo "build_cmd=npm run build" >> $GITHUB_ENV
      env: 
        CACHE_FILES: ${{ hashFiles('**/package-lock.json') }}
      shell: bash
        
    - name: Cache dependencies
      if: inputs.skip-build == 'false'
      id: node-cache
      uses: actions/cache@v4
      with:
        path: |
          **/node_modules
        key: dev-${{ runner.os }}-${{ env.cache_files }}
        
    - name: Install dependencies
      if: ${{ (steps.node-cache.outputs.cache-hit != 'true') && (inputs.skip-build == 'false') }}
      id: install-dependencies
      run: ${{ env.dependencies_cmd }}
      shell: bash

    - name: Set envs
      if: inputs.skip-build == 'false'
      id: set-envs
      run: |
        echo "${{ inputs.build-envs }}" | while read line; do
          if [[ $line == "" ]]; then
            continue;
          fi

          key=$(echo $line | cut -d '=' -f 1 | tr -d ' ')
          value=$(echo $line | cut -d '=' -f 2 | tr -d ' ')

          echo "$key=$value" >> $GITHUB_ENV
        done
      shell: bash

    - name: Build
      if: inputs.skip-build == 'false'
      id: build
      run: ${{ env.build_cmd }}
      env:
        CI: false
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Deploy static site to S3
      id: deploy
      run: ls -l && aws s3 sync ${{ inputs.build-path }} s3://${{ inputs.aws-s3-name }} --delete
      shell: bash

    - name: Invalidate CloudFront cache
      id: invalidate-cache
      run: |
        #!/usr/bin/env bash
        set -eou pipefail
        CF_DIST_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items!=null] | [?contains(Aliases.Items, '${{ inputs.aws-cloudfront-name }}')].Id | [0]" | tr -d \")
        echo "Clearing cache for ${CF_DIST_ID}..."
        CF_INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${CF_DIST_ID} --paths "/*" | jq -r '.Invalidation.Id')
        while [ $(aws cloudfront get-invalidation --distribution-id ${CF_DIST_ID} --id ${CF_INVALIDATION_ID} | jq -r '.Invalidation.Status') != "Completed" ]; do
          echo "CF_DIST_ID=${CF_DIST_ID} CF_INVALIDATION_ID=${CF_INVALIDATION_ID}: Waiting for CloudFront cache invalidation to complete..."
          sleep 5
        done
      shell: bash

    - name: Notify Slack Result
      if: ${{ always() && (inputs.slack-channel != '') && (inputs.slack-token != '') }}
      uses: cristi-mb/slack-notify@main
      with:
        message-type: 'results'
        slack-channel: ${{ inputs.slack-channel }}
        slack-bot-token: ${{ inputs.slack-token }}
        message-ts: ${{ steps.notify-slack-start.outputs.message-ts }}
        steps-context: "'${{ toJson(steps) }}'"
